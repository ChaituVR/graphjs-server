<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace GraphJS\Controllers;

use CapMousse\ReactRestify\Http\Request;
use CapMousse\ReactRestify\Http\Response;
use CapMousse\ReactRestify\Http\Session;
use Pho\Kernel\Kernel;
use Valitron\Validator;
use PhoNetworksAutogenerated\User;
use PhoNetworksAutogenerated\Group;
use Pho\Lib\Graph\ID;


/**
 * Takes care of Groups
 * 
 * @author Emre Sokullu <emre@phonetworks.org>
 */
class GroupController extends AbstractController 
{
    /**
     * Create a new Group
     * 
     * [title, description]
     * 
     * @param Request $request
     * @param Response $response
     * @param Session $session
     * @param Kernel $kernel
     * @param string $id
     * 
     * @return void
     */
    public function createGroup(Request $request, Response $response, Session $session, Kernel $kernel)
    {
        if(is_null($id=$this->dependOnSession(...\func_get_args())))
            return;
        $data = $request->getQueryParams();
        $v = new Validator($data);
        $v->rule('required', ['title', 'description']);
        $v->rule('lengthMax', ['title'], 80);
        if(!$v->validate()) {
            $this->fail($response, "Title (up to 80 chars) and Description are required.");
            return;
        }
        $i = $kernel->gs()->node($id);
        $group = $i->create($data["title"], $data["description"]);
        $this->succeed($response,[
            "id" => (string) $group->id()
        ]);
    }

    /**
     * Join Group
     * 
     * [id]
     *
     * @param Request $request
     * @param Response $response
     * @param Session $session
     * @param Kernel $kernel
     * 
     * @return void
     */
    public function joinGroup(Request $request, Response $response, Session $session, Kernel $kernel)
    {
        if(is_null($id=$this->dependOnSession(...\func_get_args())))
            return;
        $data = $request->getQueryParams();
        $v = new Validator($data);
        $v->rule('required', ['id']);
        if(!$v->validate()) {
            $this->fail($response, "Group ID  required.");
            return;
        }
        $i = $kernel->gs()->node($id);
        $group = $kernel->gs()->node($data["id"]);

        if(!($group instanceof Group)) {
            $this->fail($response, "Given ID is not associated with a Group");
            return;
        }

        $i->join($group);
        $this->succeed($response);
    }


    /**
     * List Groups
     *
     * @param Request $request
     * @param Response $response
     * @param Session $session
     * @param Kernel $kernel
     * 
     * @return void
     */
    public function listGroups(Request $request, Response $response, Kernel $kernel)
    {
        $groups = [];
        $everything = $kernel->graph()->members();
        foreach($everything as $thing) {
            if($thing instanceof Group) {
                $groups[] = [
                    "id" => (string) $thing->id(),
                    "title" => $thing->getTitle(),
                    "description" => $thing->getDescription(),
                    "creator" => (string) $thing->getCreator()->id()
                ];
            }
        }
        $this->succeed($response, [
            "groups" => $groups
        ]);
    }

    /**
     * List Group Members
     * 
     * [id]
     *
     * @param Request $request
     * @param Response $response
     * @param Kernel $kernel
     * 
     * @return void
     */
    public function listMembers(Request $request, Response $response, Kernel $kernel)
    {
        $data = $request->getQueryParams();
        $v = new Validator($data);
        $v->rule('required', ['id']);
        if(!$v->validate()) {
            $this->fail($response, "Group ID  required.");
            return;
        }
        $group = $kernel->gs()->node($data["id"]);
        if(!$group instanceof Group) {
            $this->fail($response, "Given ID is not associated with a Group");
            return;
        }
        $members = array_filter(
            $group->members(),
            function(/*mixed*/ $value): bool
                {
                    return ($value instanceof User);
                }
        );
        $this->succeed($response, [
            "members" => array_keys($members)
        ]);
    }
}