<?php
/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace GraphPress\Controllers;

use CapMousse\ReactRestify\Http\Request;
use CapMousse\ReactRestify\Http\Response;
use CapMousse\ReactRestify\Http\Session;
use Pho\Kernel\Kernel;
use Valitron\Validator;


class AuthenticationController extends \Pho\Server\Rest\Controllers\AbstractController 
{
    public function signup(Request $request, Response $response, Session $session, Kernel $kernel)
    {
        $data = $request->getQueryParams();
        // do I have to put these validations here?
        // shouldn't the schema take care of this?
        // or is it already?
        $v = new Validator($data);
        $v->rule('required', ['email', 'password']);
        $v->rule('email', 'email');
        if(!$v->validate()) {
            $this->fail($response, "Valid email and password required.");
            return;
        }
        if(!preg_match("/[0-9A-Za-z!@#$%_]{5,15}/", $data["password"])) {
            $this->fail($response, "Invalid password");
            return;
        }
        $new_user = new \PhoNetworksAutogenerated\User(
            $kernel, $kernel->graph(), $data["email"], $data["password"]
        );
        $session->set($request, "id", (string) $new_user->id());
        $response->writeJson([
            "status"=>"success", 
            "id" => (string) $new_user->id()
        ])->end();
    }

    public function login(Request $request, Response $response, Session $session, Kernel $kernel)
    {
        $data = $request->getQueryParams();
        $v = new Validator($data);
        $v->rule('required', ['email', 'password']);
        $v->rule('email', 'email');
        if(!$v->validate()) {
            $this->fail($response, "Email and password fields are required.");
            return;
        }
        $result = $kernel->index()->query(
            "MATCH (n:user {Email: {email}, Password: {password}}) RETURN n",
            [ 
                "email" => $data["email"],
                "password" => md5($data["password"])
            ]
        );
        $success = (count($result->results()) == 1);
        if(!$success) {
            $this->fail($response, "Information don't match records");
            return;
        }
        $user = $result->results()[0];
        $session->set($request, "id", $user["udid"]);
        $response->writeJson([
            "status"=>"success", 
            "id" => $user["udid"]
        ])->end();
    }

    public function logout(Request $request, Response $response, Session $session) 
    {
        $session->set($request, "id", null);
        $response->writeJson([
            "status"=>"success"
        ])->end();
    }

    

    public function whoami(Request $request, Response $response, Session $session)
    {

        //$session->start($request, $response);
        $response->writeJson(
            ["whoami"=>$session->get($request, "id")]
        )->end();
    }

}