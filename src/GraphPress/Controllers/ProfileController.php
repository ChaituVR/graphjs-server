<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

 namespace GraphPress\Controllers;

use CapMousse\ReactRestify\Http\Request;
use CapMousse\ReactRestify\Http\Response;
use CapMousse\ReactRestify\Http\Session;
use Pho\Kernel\Kernel;
use Valitron\Validator;
use PhoNetworksAutogenerated\User;
use Pho\Lib\Graph\ID;


class ProfileController extends \Pho\Server\Rest\Controllers\AbstractController 
{
    public function getProfile(Request $request, Response $response, Session $session, Kernel $kernel)
    {
        $data = $request->getQueryParams();
        $v = new Validator($data);
        $v->rule('required', ['id']);
        if(!$v->validate()) {
            $this->fail($response, "Valid user ID required.");
            return;
        }
        if(!preg_match("/^[0-9a-fA-F][0-9a-fA-F]{30}[0-9a-fA-F]$/", $data["id"])) {
            $this->fail($response, "Invalid user ID");
            return;
        }
        $user = $kernel->gs()->node($data["id"]);
        if(!$user instanceof User) {
            $this->fail($response, "Invalid user ID");
            return;
        }
        $response->writeJson([
            "status"=>"success", 
            "profile" => $user->toArray()
        ])->end();
    }

    public function setProfile(Request $request, Response $response, Session $session, Kernel $kernel)
    {
        
    }
}