<?php
/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace GraphPress\Controllers;

use CapMousse\ReactRestify\Http\Request;
use CapMousse\ReactRestify\Http\Response;
use CapMousse\ReactRestify\Http\Session;
use Pho\Kernel\Kernel;
use Valitron\Validator;
use PhoNetworksAutogenerated\User;


class MessagingController extends \Pho\Server\Rest\Controllers\AbstractController 
{
    public function message(Request $request, Response $response, Session $session, Kernel $kernel, string $id)
    {
        $data = $request->getQueryParams();
        $v = new Validator($data);
        $v->rule('required', ['to', 'message']);
        if(!$v->validate()) {
            $this->fail($response, "Valid recipient and message are required.");
            return;
        }
        if(!preg_match("/^[0-9a-fA-F][0-9a-fA-F]{30}[0-9a-fA-F]$/", $data["to"])) {
            $this->fail($response, "Invalid recipient");
            return;
        }
        if(empty($data["message"])) {
            $this->fail($response, "Message can't be empty");
            return;
        }

        $i = $kernel->gs()->node($id);
        $recipient = $kernel->gs()->node($data["to"]);
        $msg = $i->message($recipient, $data["message"]);
        
        $response->writeJson([
            "status"=>"success", 
            "id" => (string) $msg->id()
        ])->end();
    }


    public function fetchUnreadMessageCount(Request $request, Response $response, Session $session, Kernel $kernel, string $id)
    {
        $i = $kernel->gs()->node($id);
        $incoming_messages = $i->getIncomingMessages();
        $response->writeJson([
            "status"=>"success", 
            "count" => (string) count($incoming_messages)
        ])->end();
    }

    public function fetchInbox(Request $request, Response $response, Session $session, Kernel $kernel, string $id)
    {
        $i = $kernel->gs()->node($id);
        $incoming_messages = $i->getIncomingMessages();
        //eval(\Psy\sh());
        $response->writeJson([
            "status"=>"success", 
            "messages" => $incoming_messages
        ])->end();
    }

    public function fetchMessage(Request $request, Response $response, Session $session, Kernel $kernel, string $id)
    {
        $data = $request->getQueryParams();
        $v = new Validator($data);
        $v->rule('required', ['msgid']);
        if(!$v->validate()) {
            $this->fail($response, "Valid message id required.");
            return;
        }
        if(!preg_match("/^[0-9a-fA-F][0-9a-fA-F]{30}[0-9a-fA-F]$/", $data["msgid"])) {
            $this->fail($response, "Invalid message ID");
            return;
        }
        $i = $kernel->gs()->node($id);
        if( !$i->hasIncomingMessage($data["msgid"]) && !$i->hasOutgoingMessage($data["msgid"]) ) {
            $this->fail($response, "Message ID is not associated with the logged in user.");
            return;
        }
        $msg = $kernel->gs()->edge($data["msgid"]);
        $msg->setIsRead(true);
        $response->writeJson([
            "status"=>"success", 
            "message" => $msg->attributes()->toArray()
        ])->end();
    }
}
